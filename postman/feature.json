{
	"info": {
		"_postman_id": "277f0a83-e79a-4bbf-ad08-af296582db66",
		"name": "EWM",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25227787"
	},
	"item": [
		{
			"name": "Main",
			"item": [
				{
					"name": "Users.Admin",
					"item": [
						{
							"name": "Add",
							"item": [
								{
									"name": "Add user_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() \r",
													"{pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test item 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
													"});\r",
													"pm.test(\"Test item 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"Иван Петров\"').to.eql('Иван Петров');\r",
													"});\r",
													"pm.test(\"Test item 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('email');\r",
													"    pm.expect(jsonData.email, '\"email\" must be \"ivan.petrov@practicummail.ru\"').to.eql('ivan.petrov@practicummail.ru');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"ivan.petrov@practicummail.ru\",\r\n  \"name\": \"Иван Петров\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test item 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"pm.test(\"Test item 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"Мария Маркова\"').to.eql('Мария Маркова');\r",
													"});\r",
													"pm.test(\"Test item 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('email');\r",
													"    pm.expect(jsonData.email, '\"email\" must be \"mary.markova@practicummail.ru\"').to.eql('mary.markova@practicummail.ru');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"mary.markova@practicummail.ru\",\r\n  \"name\": \"Мария Маркова\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user wrong email without @",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"ivanpracticummail.ru\",\r\n  \"name\": \"Иван Сидоров\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user wrong email empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"\",\r\n  \"name\": \"Иван Петров\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user wrong email  duplicate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"ivan.petrov@practicummail.ru\",\r\n  \"name\": \"Иван Михайлович Петров\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test item 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"pm.test(\"Test item 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"Карина Мейханаджан\"').to.eql('Карина Мейханаджан');\r",
													"});\r",
													"pm.test(\"Test item 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('email');\r",
													"    pm.expect(jsonData.email, '\"email\" must be \"karina@practicummail.ru\"').to.eql('karina@practicummail.ru');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"karina@practicummail.ru\",\r\n  \"name\": \"Карина Мейханаджан\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user_4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test item 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
													"});\r",
													"pm.test(\"Test item 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"Оля Малащенко\"').to.eql('Оля Малащенко');\r",
													"});\r",
													"pm.test(\"Test item 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('email');\r",
													"    pm.expect(jsonData.email, '\"email\" must be \"olga.m@practicummail.ru\"').to.eql('olga.m@practicummail.ru');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"olga.m@practicummail.ru\",\r\n  \"name\": \"Оля Малащенко\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user_5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test item 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);\r",
													"});\r",
													"pm.test(\"Test item 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"Варя Щербакова\"').to.eql('Варя Щербакова');\r",
													"});\r",
													"pm.test(\"Test item 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('email');\r",
													"    pm.expect(jsonData.email, '\"email\" must be \"varvara@practicummail.ru\"').to.eql('varvara@practicummail.ru');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"varvara@practicummail.ru\",\r\n  \"name\": \"Варя Щербакова\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user_6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test item 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 6').to.eql(6);\r",
													"});\r",
													"pm.test(\"Test item 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"Зоя Яровицина\"').to.eql('Зоя Яровицина');\r",
													"});\r",
													"pm.test(\"Test item 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('email');\r",
													"    pm.expect(jsonData.email, '\"email\" must be \"zoe@practicummail.ru\"').to.eql('zoe@practicummail.ru');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"zoe@practicummail.ru\",\r\n  \"name\": \"Зоя Яровицина\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user_7",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"ira@practicummail.ru\",\r\n  \"name\": \"Ирина Мягкова\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user_8",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"nadia@practicummail.ru\",\r\n  \"name\": \"Надежда Косых\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user_9",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"inga@practicummail.ru\",\r\n  \"name\": \"Инга Стоколяс\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user_10",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"saule@practicummail.ru\",\r\n  \"name\": \"Сауле Юсупова\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List",
							"item": [
								{
									"name": "Get selected Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Test list user response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[0]).to.have.property('id');\r",
													"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
													"});\r",
													"pm.test(\"Test user[0] 'email' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[0]).to.have.property('email');\r",
													"    pm.expect(jsonData[0].email, '\"email\" must be \"ivan.petrov@practicummail.ru\"').to.eql('ivan.petrov@practicummail.ru');\r",
													"});\r",
													"pm.test(\"Test user[0] 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[0]).to.have.property('name');\r",
													"    pm.expect(jsonData[0].name, '\"name\" must be \"Иван Петров\"').to.eql('Иван Петров');\r",
													"});\r",
													"\r",
													"pm.test(\"Test user[1] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[1]).to.have.property('id');\r",
													"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"pm.test(\"Test user[1] 'email' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[1]).to.have.property('email');\r",
													"    pm.expect(jsonData[1].email, '\"email\" must be \"mary.markova@practicummail.ru\"').to.eql('mary.markova@practicummail.ru');\r",
													"});\r",
													"pm.test(\"Test user[1] 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[1]).to.have.property('name');\r",
													"    pm.expect(jsonData[1].name, '\"name\" must be \"Мария Маркова\"').to.eql('Мария Маркова');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test user[2] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[2]).to.have.property('id');\r",
													"    pm.expect(jsonData[2].id, '\"id\" must be 4').to.eql(4);\r",
													"});\r",
													"pm.test(\"Test user[2] 'email' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[2]).to.have.property('email');\r",
													"    pm.expect(jsonData[2].email, '\"email\" must be \"olga.m@practicummail.ru\"').to.eql('olga.m@practicummail.ru');\r",
													"});\r",
													"pm.test(\"Test user[2] 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[2]).to.have.property('name');\r",
													"    pm.expect(jsonData[2].name, '\"name\" must be \"Оля Малащенко\"').to.eql('Оля Малащенко');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/users?ids=1&ids=2&ids=4",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "1"
												},
												{
													"key": "ids",
													"value": "2"
												},
												{
													"key": "ids",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all Users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Test list user response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length, 'List length must be 10').to.eql(10);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[0]).to.have.property('id');\r",
													"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[1]).to.have.property('id');\r",
													"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[2]).to.have.property('id');\r",
													"    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[3]).to.have.property('id');\r",
													"    pm.expect(jsonData[3].id, '\"id\" must be 4').to.eql(4);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[4]).to.have.property('id');\r",
													"    pm.expect(jsonData[4].id, '\"id\" must be 5').to.eql(5);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[5]).to.have.property('id');\r",
													"    pm.expect(jsonData[5].id, '\"id\" must be 6').to.eql(6);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[6]).to.have.property('id');\r",
													"    pm.expect(jsonData[6].id, '\"id\" must be 7').to.eql(7);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[7]).to.have.property('id');\r",
													"    pm.expect(jsonData[7].id, '\"id\" must be 8').to.eql(8);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[8]).to.have.property('id');\r",
													"    pm.expect(jsonData[8].id, '\"id\" must be 9').to.eql(9);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[9]).to.have.property('id');\r",
													"    pm.expect(jsonData[9].id, '\"id\" must be 10').to.eql(10);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/users",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "1",
													"disabled": true
												},
												{
													"key": "ids",
													"value": "2",
													"disabled": true
												},
												{
													"key": "ids",
													"value": "4",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all Users from_2 size_5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Test list user response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length, 'List length must be 5').to.eql(5);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/users?from=3&size=5",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "from",
													"value": "3"
												},
												{
													"key": "size",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get users wrong id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/users?ids=1&ids=33",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "1"
												},
												{
													"key": "ids",
													"value": "33"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Users From is bigger then all",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test search Users response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/users?ids=1&ids=2&from=22&size=5",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "1"
												},
												{
													"key": "ids",
													"value": "2"
												},
												{
													"key": "from",
													"value": "22"
												},
												{
													"key": "size",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get users wrong all ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test search Users response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/users?ids=22&ids=33",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "22"
												},
												{
													"key": "ids",
													"value": "33"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Delete userId=5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function()\r",
													"{pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/users/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete userId=33",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function()\r",
													"{pm.response.to.have.status(404);\r",
													"pm.response.to.be.withBody;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/admin/users/33",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"users",
												"33"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Categories.Admin",
					"item": [
						{
							"name": "Add",
							"item": [
								{
									"name": "Add Category_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function()\r",
													"{pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test user 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"Концерты\"').to.eql('Концерты');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Концерты\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/categories",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Category_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function()\r",
													"{pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test user 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"Кухня\"').to.eql('Кухня');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Кухня\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/categories",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Category_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function()\r",
													"{pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test user 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"Выставки\"').to.eql('Выставки');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Выставки\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/categories",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Category_4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function()\r",
													"{pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test user 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"На воде\"').to.eql('На воде');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"На воде\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/categories",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Category_5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function()\r",
													"{pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test user 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"В ресторане\"').to.eql('В ресторане');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"В ресторане\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/categories",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Category_wrong name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/categories",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Category_6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function()\r",
													"{pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Технологии\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/categories",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Category_7",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function()\r",
													"{pm.response.to.have.status(201);\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Шоу\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/categories",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List",
							"item": [
								{
									"name": "List categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
													"    pm.response.to.be.ok;\r",
													"\r",
													"    pm.response.to.be.withBody;\r",
													"\r",
													"    pm.response.to.be.json;\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"    \r",
													"    pm.expect(jsonData.length, 'List length must be 7').to.eql(7);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/categories",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get by id",
							"item": [
								{
									"name": "Get category 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){pm.response.to.be.ok;\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test user 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"Выставки\"').to.eql('Выставки');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/categories/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories",
												"3"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Delete category 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 204\", function()\r",
													"{pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/categories/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete category wrong id = 44",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/categories/44",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories",
												"44"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Patch",
							"item": [
								{
									"name": "Patch category 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const body = pm.response.json;\r",
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){pm.response.to.be.ok;\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;});\r",
													"\r",
													"pm.test(\"Test user 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user 'name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('name');\r",
													"    pm.expect(jsonData.name, '\"name\" must be \"На кухне\"').to.eql('На кухне');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"На кухне\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/categories/5",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch category wrong id=33",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"На кухне\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/categories/33",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories",
												"33"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch category empty name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/categories/5",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories",
												"5"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Event.Private",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Add event_1  user 1 with Paid with PartLimit without RM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
													"});\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Сплав на байдарках похож на полет.\"').to.eql('Сплав на байдарках похож на полет.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be \"4\"').to.eql(4);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"На воде\"').to.eql('На воде');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
													"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\"').to.eql('Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-07-31 15:00:00\"').to.eql('2024-07-31 15:00:00');\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.id  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('id');\r",
													"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be \"1\"').to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.name  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('name');\r",
													"    pm.expect(jsonData.initiator.name, '\"initiator.name\" must be \"Иван Петров\"').to.eql('Иван Петров');\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"55.754166\"').to.eql(55.754166);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lon\" must be \"37.62\"').to.eql(37.62);\r",
													"});\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"true\"').to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"10\"').to.eql(10);\r",
													"});\r",
													"\r",
													"pm.test(\"Test requestModeration field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('requestModeration');\r",
													"    pm.expect(jsonData.requestModeration, '\"requestModeration\" must be \"false\"').to.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Test state field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('state');\r",
													"    pm.expect(jsonData.state, '\"state\" must be \"PENDING\"').to.eql('PENDING');\r",
													"});\r",
													"\r",
													"pm.test(\"Test title field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('title');\r",
													"    pm.expect(jsonData.title, '\"title\" must be \"Сплав на байдарках\"').to.eql('Сплав на байдарках');\r",
													"});\r",
													"\r",
													"pm.test(\"Test views field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('views');\r",
													"    pm.expect(jsonData.views, '\"views\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\r\n  \"category\": 4,\r\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2024-07-31 15:00:00\",\r\n  \"location\": {\r\n    \"lat\": 55.754166,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/1/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event_2 user _1 without Paid with PartLimit without RM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Катание на яхте по серым водам залива\"').to.eql('Катание на яхте по серым водам залива');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be \"4\"').to.eql(4);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"На воде\"').to.eql('На воде');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
													"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Катание на яхте проветрит вам мозги, возможно, вплоть до их полного выветривания').to.eql('Катание на яхте проветрит вам мозги, возможно, вплоть до их полного выветривания');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-06-22 15:00:00\"').to.eql('2024-06-22 15:00:00');\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.id  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('id');\r",
													"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be \"1\"').to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.name  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('name');\r",
													"    pm.expect(jsonData.initiator.name, '\"initiator.name\" must be \"Иван Петров\"').to.eql('Иван Петров');\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"59.94\"').to.eql(59.94);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lon\" must be \"30.3\"').to.eql(30.3);\r",
													"});\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"false\"').to.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"4\"').to.eql(4);\r",
													"});\r",
													"\r",
													"pm.test(\"Test requestModeration field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('requestModeration');\r",
													"    pm.expect(jsonData.requestModeration, '\"requestModeration\" must be \"false\"').to.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Test state field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('state');\r",
													"    pm.expect(jsonData.state, '\"state\" must be \"PENDING\"').to.eql('PENDING');\r",
													"});\r",
													"\r",
													"pm.test(\"Test title field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('title');\r",
													"    pm.expect(jsonData.title, '\"title\" must be \"Под парусом по заливу\"').to.eql('Под парусом по заливу');\r",
													"});\r",
													"\r",
													"pm.test(\"Test views field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('views');\r",
													"    pm.expect(jsonData.views, '\"views\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Катание на яхте по серым водам залива\",\r\n  \"category\": 4,\r\n  \"description\": \"Катание на яхте проветрит вам мозги, возможно, вплоть до их полного выветривания\",\r\n  \"eventDate\": \"2024-06-22 15:00:00\",\r\n  \"location\": {\r\n    \"lat\": 59.94,\r\n    \"lon\": 30.30\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 4,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Под парусом по заливу\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/1/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event_3 user_2 without Paid without PartLimit without RM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Концерт на берегу залива в полнолуние\"').to.eql('Концерт на берегу залива в полнолуние');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be \"1\"').to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"Концерты\"').to.eql('Концерты');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
													"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Музыканты выступят на песчаном пляже, там же будут расставлены скамейки для слушаталей.\"').to.eql('Музыканты выступят на песчаном пляже, там же будут расставлены скамейки для слушаталей.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-06-25 22:00:00\"').to.eql('2024-06-25 22:00:00');\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.id  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('id');\r",
													"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be \"2\"').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.name  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('name');\r",
													"    pm.expect(jsonData.initiator.name, '\"initiator.name\" must be \"Мария Маркова\"').to.eql('Мария Маркова');\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"59.84\"').to.eql(59.84);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lon\" must be \"30.3033\"').to.eql(30.3033);\r",
													"});\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"false\"').to.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test requestModeration field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('requestModeration');\r",
													"    pm.expect(jsonData.requestModeration, '\"requestModeration\" must be \"false\"').to.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Test state field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('state');\r",
													"    pm.expect(jsonData.state, '\"state\" must be \"PENDING\"').to.eql('PENDING');\r",
													"});\r",
													"\r",
													"pm.test(\"Test title field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('title');\r",
													"    pm.expect(jsonData.title, '\"title\" must be \"Музыка под шум моря\"').to.eql('Музыка под шум моря');\r",
													"});\r",
													"\r",
													"pm.test(\"Test views field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('views');\r",
													"    pm.expect(jsonData.views, '\"views\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Концерт на берегу залива в полнолуние\",\r\n  \"category\": 1,\r\n  \"description\": \"Музыканты выступят на песчаном пляже, там же будут расставлены скамейки для слушаталей.\",\r\n  \"eventDate\": \"2024-06-25 22:00:00\",\r\n  \"location\": {\r\n    \"lat\": 59.84,\r\n    \"lon\": 30.3033\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Музыка под шум моря\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event_4 user_2 with Paid with PartLimit with RM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Концерт в Моджном доме Невский 21\",\r\n  \"category\": 1,\r\n  \"description\": \"Музыканты выступят рядом с подиумом\",\r\n  \"eventDate\": \"2024-02-15 20:00:00\",\r\n  \"location\": {\r\n    \"lat\": 59.93563, \r\n    \"lon\": 30.32247\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 15,\r\n  \"requestModeration\": true,\r\n  \"title\": \"Музыка и прекрасные наряды Пети Карамелькина будут прекрасно сочетаться\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event_5 user_4 with Paid with PartLimit with RM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Биеннале «Искусство будущего» / Art for the Future\",\r\n  \"category\": 2,\r\n  \"description\": \"В экспозиции представлено 47 проектов, созданных художниками, которые рассуждают в своих работах о влиянии технологий на людей. Вместе с мировыми звездами вроде Рефика Анадола, Рафаэля Лосано-Хеммера, Михаля Ровнера, Stanza, арт-коллективов AES + F, Random International и TeamLab \",\r\n  \"eventDate\": \"2024-02-15 20:00:00\",\r\n  \"location\": {\r\n    \"lat\": 55.93563, \r\n    \"lon\": 37.6983\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 15,\r\n  \"requestModeration\": true,\r\n  \"title\": \"посвящена современному искусству, созданному с помощью новых технологий\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/4/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"4",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event_6 user_6  with Paid with PartLimit with RM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 6').to.eql(6);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"из романтической мечты покорение Арктики стало прагматической целью\",\r\n  \"category\": 6,\r\n  \"description\": \"На выставке в мультимедийном парке «Россия — моя история» представлены архивные фотографии, документы, личные вещи и экипировка исследователей Арктики.\",\r\n  \"eventDate\": \"2024-01-25 10:00:00\",\r\n  \"location\": {\r\n    \"lat\": 56.88563, \r\n    \"lon\": 36.1383\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": true,\r\n  \"title\": \"Выставка «Притяжение Арктики»\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/6/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"6",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event with short annotation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"из \",\r\n  \"category\": 6,\r\n  \"description\": \"На выставке в мультимедийном парке «Россия — моя история» представлены архивные фотографии, документы, личные вещи и экипировка исследователей Арктики.\",\r\n  \"eventDate\": \"2024-01-25 10:00:00\",\r\n  \"location\": {\r\n    \"lat\": 56.88563, \r\n    \"lon\": 36.1383\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Выставка «Притяжение Арктики»\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/6/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"6",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event with short description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"из романтической мечты покорение Арктики стало прагматической целью\",\r\n  \"category\": 6,\r\n  \"description\": \"На \",\r\n  \"eventDate\": \"2024-01-25 10:00:00\",\r\n  \"location\": {\r\n    \"lat\": 56.88563, \r\n    \"lon\": 36.1383\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Выставка «Притяжение Арктики»\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/6/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"6",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event with short title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"из романтической мечты покорение Арктики стало прагматической целью\",\r\n  \"category\": 6,\r\n  \"description\": \"На выставке в мультимедийном парке «Россия — моя история» представлены архивные фотографии, документы, личные вещи и экипировка исследователей Арктики.\",\r\n  \"eventDate\": \"2024-01-25 10:00:00\",\r\n  \"location\": {\r\n    \"lat\": 56.88563, \r\n    \"lon\": 36.1383\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"i\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/6/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"6",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event with empty Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"из романтической мечты покорение Арктики стало прагматической целью\",\r\n  \"description\": \"На выставке в мультимедийном парке «Россия — моя история» представлены архивные фотографии, документы, личные вещи и экипировка исследователей Арктики.\",\r\n  \"eventDate\": \"2024-01-25 10:00:00\",\r\n  \"location\": {\r\n    \"lat\": 56.88563, \r\n    \"lon\": 36.1383\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Выставка «Притяжение Арктики»\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/6/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"6",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event with empty Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"из романтической мечты покорение Арктики стало прагматической целью\",\r\n  \"category\": 6,\r\n  \"description\": \"На выставке в мультимедийном парке «Россия — моя история» представлены архивные фотографии, документы, личные вещи и экипировка исследователей Арктики.\",\r\n  \"eventDate\": \"2024-01-25 10:00:00\",\r\n  \"location\": {\r\n    \"lon\": 36.1383\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Выставка «Притяжение Арктики»\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/6/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"6",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event_7 User_1 without Paid with PartLimit without RM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Сольный концерт танцевального коллектива DS CREW\",\r\n  \"category\": 7,\r\n  \"description\": \"С первых движений танцовщики из DS CREW полюбились миллионам зрителей «Новых танцев на ТНТ». Теперь у нас есть возможность увидеть полноценное шоу самой хайповой команды проекта. В качестве специального гостя в концерте примет участие певец Коста Лакоста.\",\r\n  \"eventDate\": \"2024-01-25 10:00:00\",\r\n  \"location\": {\r\n    \"lat\": 56.88563, \r\n    \"lon\": 36.1383\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"DS CREW dance\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/1/events/",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"events",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event_8 User_9 without Paid with PartLimit without RM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Невероятные каникулы!\",\r\n  \"category\": 7,\r\n  \"description\": \"танцы-жманцы-обжиманцы\",\r\n  \"eventDate\": \"2024-03-25 10:00:00\",\r\n  \"location\": {\r\n    \"lat\": 55.88563, \r\n    \"lon\": 36.2383\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Выходные в доме отдыха\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/9/events/",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"9",
												"events",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event_9 User_9 without Paid with PartLimit without RM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Весёлые старты всей семьёй\",\r\n  \"category\": 7,\r\n  \"description\": \"приезжайте на природу, чтоб провести время среди любящих семей, пытающихся пройти сквозь испытания к победе\",\r\n  \"eventDate\": \"2024-05-25 13:00:00\",\r\n  \"location\": {\r\n    \"lat\": 55.38563, \r\n    \"lon\": 36.4383\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Семейный досуг в доме отдыха\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/9/events/",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"9",
												"events",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Add event_10 User_9 without Paid with PartLimit without RM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Покажи свою собаку миру\",\r\n  \"category\": 7,\r\n  \"description\": \"Съезд любителей корги на солнечной опушке\",\r\n  \"eventDate\": \"2024-06-25 11:00:00\",\r\n  \"location\": {\r\n    \"lat\": 56.38563, \r\n    \"lon\": 36.0383\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Корги на природе\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/9/events/",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"9",
												"events",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List and Get one",
							"item": [
								{
									"name": "Get own events from user with id=1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/2/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get own events from user with id=2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/2/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get own events from user with id=9",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/9/events",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"9",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get event with id=3 from user with id=2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get event with wrong id=33 from user with id=2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/2/events/33",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"33"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get event with  id=1 created by user with id=1 from user with id=2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/2/events/1",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get event with id=3 from wrong user with id=22",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/22/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"22",
												"events",
												"3"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Patch",
							"item": [
								{
									"name": "Patch event_3 - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Концерт на берегу залива в полнолуние\"').to.eql('Концерт на берегу залива в полнолуние');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be \"1\"').to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"Концерты\"').to.eql('Концерты');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
													"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей.\"').to.eql('Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-06-25 22:30:00\"').to.eql('2024-06-25 22:30:00');\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.id  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('id');\r",
													"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be \"2\"').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.name  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('name');\r",
													"    pm.expect(jsonData.initiator.name, '\"initiator.name\" must be \"Мария Маркова\"').to.eql('Мария Маркова');\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"59.8476\"').to.eql(59.8476);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lat\" must be \"30.3033\"').to.eql(30.3033);\r",
													"});\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"false\"').to.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test requestModeration field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('requestModeration');\r",
													"    pm.expect(jsonData.requestModeration, '\"requestModeration\" must be \"false\"').to.eql(false);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test state field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('state');\r",
													"    pm.expect(jsonData.state, '\"state\" must be \"CANCELED\"').to.eql('CANCELED');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test title field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('title');\r",
													"    pm.expect(jsonData.title, '\"title\" must be \"Музыка под шум моря\"').to.eql('Музыка под шум моря');\r",
													"});\r",
													"\r",
													"pm.test(\"Test views field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('views');\r",
													"    pm.expect(jsonData.views, '\"views\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"category\": 1,\r\n  \"description\": \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей.\",\r\n  \"eventDate\": \"2024-06-25 22:30:00\",\r\n  \"location\": {\r\n    \"lat\": 59.8476,\r\n    \"lon\": 30.3033\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"stateAction\": \"CANCEL_REVIEW\",\r\n  \"title\": \"Музыка под шум моря\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - Only Send_to_review",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Концерт на берегу залива в полнолуние\"').to.eql('Концерт на берегу залива в полнолуние');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be 1').to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"Концерты\"').to.eql('Концерты');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
													"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей.\"').to.eql('Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-06-25 22:30:00\"').to.eql('2024-06-25 22:30:00');\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.id  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('id');\r",
													"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be \"2\"').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.name  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('name');\r",
													"    pm.expect(jsonData.initiator.name, '\"initiator.name\" must be \"Мария Маркова\"').to.eql('Мария Маркова');\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"59.8476\"').to.eql(59.8476);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lat\" must be \"30.3033\"').to.eql(30.3033);\r",
													"});\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"false\"').to.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test requestModeration field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('requestModeration');\r",
													"    pm.expect(jsonData.requestModeration, '\"requestModeration\" must be \"false\"').to.eql(false);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test state field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('state');\r",
													"    pm.expect(jsonData.state, '\"state\" must be \"PENDING\"').to.eql('PENDING');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test title field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('title');\r",
													"    pm.expect(jsonData.title, '\"title\" must be \"Музыка под шум моря\"').to.eql('Музыка под шум моря');\r",
													"});\r",
													"\r",
													"pm.test(\"Test views field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('views');\r",
													"    pm.expect(jsonData.views, '\"views\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"stateAction\": \"SEND_TO_REVIEW\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 with wrong user id=1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Концерт на берегу залива в полнолуние без туч\",\r\n  \"category\": 1,\r\n  \"description\": \"Музыканты выступят на песчаном пляже, там же будут расставлены скамейки для слушаталей.\",\r\n  \"eventDate\": \"2024-06-25 22:30:00\",\r\n  \"location\": {\r\n    \"lat\": 59.8476,\r\n    \"lon\": 30.3033\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"stateAction\": \"CANCEL_REVIEW\",\r\n  \"title\": \"Музыка под шум моря\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/1/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_55 - not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Концерт на берегу залива в полнолуние без туч\",\r\n  \"category\": 1,\r\n  \"description\": \"Музыканты выступят на песчаном пляже, там же будут расставлены скамейки для слушаталей.\",\r\n  \"eventDate\": \"2024-06-25 22:30:00\",\r\n  \"location\": {\r\n    \"lat\": 59.8476,\r\n    \"lon\": 30.3033\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"stateAction\": \"CANCEL_REVIEW\",\r\n  \"title\": \"Музыка под шум моря\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/55",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"55"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only Annotation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Послушайте музыку в тёплый вечер на берегу залива\"\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only Category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"Кухня\"').to.eql('Кухня');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"category\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.\"').to.eql('Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"description\": \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only EventDate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-06-27 22:30:00\"').to.eql('2024-06-27 22:30:00');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"eventDate\": \"2024-06-27 22:30:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only Location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Послушайте музыку в тёплый вечер на берегу залива\"').to.eql('Послушайте музыку в тёплый вечер на берегу залива');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"Кухня\"').to.eql('Кухня');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
													"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.\"').to.eql('Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-06-27 22:30:00\"').to.eql('2024-06-27 22:30:00');\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.id  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('id');\r",
													"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be \"2\"').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.name  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('name');\r",
													"    pm.expect(jsonData.initiator.name, '\"initiator.name\" must be \"Мария Маркова\"').to.eql('Мария Маркова');\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"59.9476\"').to.eql(59.9476);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lat\" must be \"30.3033\"').to.eql(30.3033);\r",
													"});\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"false\"').to.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"0\"').to.eql(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"location\": {\r\n    \"lat\": 59.9476,\r\n    \"lon\": 30.3033\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only Paid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Послушайте музыку в тёплый вечер на берегу залива\"').to.eql('Послушайте музыку в тёплый вечер на берегу залива');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"Кухня\"').to.eql('Кухня');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
													"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.\"').to.eql('Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-06-27 22:30:00\"').to.eql('2024-06-27 22:30:00');\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.id  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('id');\r",
													"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be \"2\"').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.name  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('name');\r",
													"    pm.expect(jsonData.initiator.name, '\"initiator.name\" must be \"Мария Маркова\"').to.eql('Мария Маркова');\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"59.9476\"').to.eql(59.9476);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lat\" must be \"30.3033\"').to.eql(30.3033);\r",
													"});\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"true\"').to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"paid\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only participantLimit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Послушайте музыку в тёплый вечер на берегу залива\"').to.eql('Послушайте музыку в тёплый вечер на берегу залива');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"Кухня\"').to.eql('Кухня');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
													"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.\"').to.eql('Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-06-27 22:30:00\"').to.eql('2024-06-27 22:30:00');\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.id  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('id');\r",
													"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be \"2\"').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.name  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('name');\r",
													"    pm.expect(jsonData.initiator.name, '\"initiator.name\" must be \"Мария Маркова\"').to.eql('Мария Маркова');\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"59.9476\"').to.eql(59.9476);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lat\" must be \"30.3033\"').to.eql(30.3033);\r",
													"});\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"true\"').to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"5\"').to.eql(5);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"participantLimit\": 5\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only requestModeration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Послушайте музыку в тёплый вечер на берегу залива\"').to.eql('Послушайте музыку в тёплый вечер на берегу залива');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"Кухня\"').to.eql('Кухня');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
													"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.\"').to.eql('Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-06-27 22:30:00\"').to.eql('2024-06-27 22:30:00');\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.id  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('id');\r",
													"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be \"2\"').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.name  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('name');\r",
													"    pm.expect(jsonData.initiator.name, '\"initiator.name\" must be \"Мария Маркова\"').to.eql('Мария Маркова');\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"59.9476\"').to.eql(59.9476);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lat\" must be \"30.3033\"').to.eql(30.3033);\r",
													"});\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"true\"').to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"5\"').to.eql(5);\r",
													"});\r",
													"\r",
													"pm.test(\"Test requestModeration field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('requestModeration');\r",
													"    pm.expect(jsonData.requestModeration, '\"requestModeration\" must be \"true\"').to.eql(true);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"requestModeration\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only stateAction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Послушайте музыку в тёплый вечер на берегу залива\"').to.eql('Послушайте музыку в тёплый вечер на берегу залива');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"Кухня\"').to.eql('Кухня');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
													"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.\"').to.eql('Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-06-27 22:30:00\"').to.eql('2024-06-27 22:30:00');\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.id  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('id');\r",
													"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be \"2\"').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.name  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('name');\r",
													"    pm.expect(jsonData.initiator.name, '\"initiator.name\" must be \"Мария Маркова\"').to.eql('Мария Маркова');\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"59.9476\"').to.eql(59.9476);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lat\" must be \"30.3033\"').to.eql(30.3033);\r",
													"});\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"true\"').to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"5\"').to.eql(5);\r",
													"});\r",
													"\r",
													"pm.test(\"Test requestModeration field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('requestModeration');\r",
													"    pm.expect(jsonData.requestModeration, '\"requestModeration\" must be \"true\"').to.eql(true);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test state field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('state');\r",
													"    pm.expect(jsonData.state, '\"state\" must be \"CANCELED\"').to.eql('CANCELED');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test views field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('views');\r",
													"    pm.expect(jsonData.views, '\"views\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"stateAction\": \"CANCEL_REVIEW\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only title",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Послушайте музыку в тёплый вечер на берегу залива\"').to.eql('Послушайте музыку в тёплый вечер на берегу залива');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"Кухня\"').to.eql('Кухня');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
													"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.\"').to.eql('Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-06-27 22:30:00\"').to.eql('2024-06-27 22:30:00');\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.id  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('id');\r",
													"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be \"2\"').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.name  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('name');\r",
													"    pm.expect(jsonData.initiator.name, '\"initiator.name\" must be \"Мария Маркова\"').to.eql('Мария Маркова');\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"59.9476\"').to.eql(59.9476);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lat\" must be \"30.3033\"').to.eql(30.3033);\r",
													"});\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"true\"').to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"5\"').to.eql(5);\r",
													"});\r",
													"\r",
													"pm.test(\"Test requestModeration field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('requestModeration');\r",
													"    pm.expect(jsonData.requestModeration, '\"requestModeration\" must be \"true\"').to.eql(true);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test state field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('state');\r",
													"    pm.expect(jsonData.state, '\"state\" must be \"CANCELED\"').to.eql('CANCELED');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test title field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('title');\r",
													"    pm.expect(jsonData.title, '\"title\" must be \"Музыка под шум волн в заливе\"').to.eql('Музыка под шум волн в заливе');\r",
													"});\r",
													"\r",
													"pm.test(\"Test views field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('views');\r",
													"    pm.expect(jsonData.views, '\"views\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"Музыка под шум волн в заливе\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"events",
												"3"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Events.Admin",
					"item": [
						{
							"name": "List",
							"item": [
								{
									"name": "Find_1 all",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){pm.response.to.be.ok;\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[0]).to.have.property('id');\r",
													"    pm.expect(jsonData[0].id, '\"id\" must be 5').to.eql(5);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/events?users=4&users=6&states=PENDING&categories=1&categories=2&rangeStart=2024-01-01 00:00:00&rangeEnd=2024-12-01 00:00:00&from=0&size=5",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "4"
												},
												{
													"key": "users",
													"value": "6"
												},
												{
													"key": "states",
													"value": "PENDING"
												},
												{
													"key": "categories",
													"value": "1"
												},
												{
													"key": "categories",
													"value": "2"
												},
												{
													"key": "rangeStart",
													"value": "2024-01-01 00:00:00"
												},
												{
													"key": "rangeEnd",
													"value": "2024-12-01 00:00:00"
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find_2 users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){pm.response.to.be.ok;\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length, 'List length must be 4').to.eql(4);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[0]).to.have.property('id');\r",
													"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[1]).to.have.property('id');\r",
													"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test event[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[2]).to.have.property('id');\r",
													"    pm.expect(jsonData[2].id, '\"id\" must be 6').to.eql(6);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test event[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[3]).to.have.property('id');\r",
													"    pm.expect(jsonData[3].id, '\"id\" must be 7').to.eql(7);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/events?users=1&users=6",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "1"
												},
												{
													"key": "states",
													"value": "PENDING",
													"disabled": true
												},
												{
													"key": "categories",
													"value": "1",
													"disabled": true
												},
												{
													"key": "categories",
													"value": "2",
													"disabled": true
												},
												{
													"key": "rangeStart",
													"value": "2024-01-01 00:00:00",
													"disabled": true
												},
												{
													"key": "rangeEnd",
													"value": "2024-12-01 00:00:00",
													"disabled": true
												},
												{
													"key": "from",
													"value": "0",
													"disabled": true
												},
												{
													"key": "size",
													"value": "5",
													"disabled": true
												},
												{
													"key": "users",
													"value": "6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find_3 states",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){pm.response.to.be.ok;\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length, 'List length must be 9').to.eql(9);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[0]).to.have.property('id');\r",
													"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event[1] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[1]).to.have.property('id');\r",
													"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test event[2] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[2]).to.have.property('id');\r",
													"    pm.expect(jsonData[2].id, '\"id\" must be 4').to.eql(4);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test event[3] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[3]).to.have.property('id');\r",
													"    pm.expect(jsonData[3].id, '\"id\" must be 5').to.eql(5);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event[4] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[4]).to.have.property('id');\r",
													"    pm.expect(jsonData[4].id, '\"id\" must be 6').to.eql(6);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event[5] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[5]).to.have.property('id');\r",
													"    pm.expect(jsonData[5].id, '\"id\" must be 7').to.eql(7);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event[6] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[6]).to.have.property('id');\r",
													"    pm.expect(jsonData[6].id, '\"id\" must be 8').to.eql(8);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event[7] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[7]).to.have.property('id');\r",
													"    pm.expect(jsonData[7].id, '\"id\" must be 9').to.eql(9);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/events?states=PENDING",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "4",
													"disabled": true
												},
												{
													"key": "users",
													"value": "6",
													"disabled": true
												},
												{
													"key": "states",
													"value": "PENDING"
												},
												{
													"key": "categories",
													"value": "1",
													"disabled": true
												},
												{
													"key": "categories",
													"value": "2",
													"disabled": true
												},
												{
													"key": "rangeStart",
													"value": "2024-01-01 00:00:00",
													"disabled": true
												},
												{
													"key": "rangeEnd",
													"value": "2024-12-01 00:00:00",
													"disabled": true
												},
												{
													"key": "from",
													"value": "0",
													"disabled": true
												},
												{
													"key": "size",
													"value": "5",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find_4 categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){pm.response.to.be.ok;\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[0]).to.have.property('id');\r",
													"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event[1] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[1]).to.have.property('id');\r",
													"    pm.expect(jsonData[1].id, '\"id\" must be 4').to.eql(4);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test event[2] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[2]).to.have.property('id');\r",
													"    pm.expect(jsonData[2].id, '\"id\" must be 5').to.eql(5);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/events?categories=1&categories=2",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "4",
													"disabled": true
												},
												{
													"key": "users",
													"value": "6",
													"disabled": true
												},
												{
													"key": "states",
													"value": "PENDING",
													"disabled": true
												},
												{
													"key": "categories",
													"value": "1"
												},
												{
													"key": "categories",
													"value": "2"
												},
												{
													"key": "rangeStart",
													"value": "2024-01-01 00:00:00",
													"disabled": true
												},
												{
													"key": "rangeEnd",
													"value": "2024-12-01 00:00:00",
													"disabled": true
												},
												{
													"key": "from",
													"value": "0",
													"disabled": true
												},
												{
													"key": "size",
													"value": "5",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find_5 with start",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){pm.response.to.be.ok;\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event[0] 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData[0]).to.have.property('id');\r",
													"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/events?rangeStart=2024-07-01 00:00:00",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "4",
													"disabled": true
												},
												{
													"key": "users",
													"value": "6",
													"disabled": true
												},
												{
													"key": "states",
													"value": "PENDING",
													"disabled": true
												},
												{
													"key": "categories",
													"value": "1",
													"disabled": true
												},
												{
													"key": "categories",
													"value": "2",
													"disabled": true
												},
												{
													"key": "rangeStart",
													"value": "2024-07-01 00:00:00"
												},
												{
													"key": "rangeEnd",
													"value": "2024-12-01 00:00:00",
													"disabled": true
												},
												{
													"key": "from",
													"value": "0",
													"disabled": true
												},
												{
													"key": "size",
													"value": "5",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find_5 with start and end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){pm.response.to.be.ok;\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length, 'List length must be 4').to.eql(4);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/events?rangeStart=2024-06-01 00:00:00&rangeEnd=2024-12-01 00:00:00",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "4",
													"disabled": true
												},
												{
													"key": "users",
													"value": "6",
													"disabled": true
												},
												{
													"key": "states",
													"value": "PENDING",
													"disabled": true
												},
												{
													"key": "categories",
													"value": "1",
													"disabled": true
												},
												{
													"key": "categories",
													"value": "2",
													"disabled": true
												},
												{
													"key": "rangeStart",
													"value": "2024-06-01 00:00:00"
												},
												{
													"key": "rangeEnd",
													"value": "2024-12-01 00:00:00"
												},
												{
													"key": "from",
													"value": "0",
													"disabled": true
												},
												{
													"key": "size",
													"value": "5",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find_5 with from and size",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){pm.response.to.be.ok;\r",
													"pm.response.to.be.withBody;\r",
													"pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length, 'List length must be 5').to.eql(5);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/admin/events?from=0&size=5",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events"
											],
											"query": [
												{
													"key": "users",
													"value": "4",
													"disabled": true
												},
												{
													"key": "users",
													"value": "6",
													"disabled": true
												},
												{
													"key": "states",
													"value": "PENDING",
													"disabled": true
												},
												{
													"key": "categories",
													"value": "1",
													"disabled": true
												},
												{
													"key": "categories",
													"value": "2",
													"disabled": true
												},
												{
													"key": "rangeStart",
													"value": "2024-01-01 00:00:00",
													"disabled": true
												},
												{
													"key": "rangeEnd",
													"value": "2024-12-01 00:00:00",
													"disabled": true
												},
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "5"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Patch",
							"item": [
								{
									"name": "Patch status for event 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test event 'id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('id');\r",
													"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
													"});\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Сплав на байдарках похож на полет.\"').to.eql('Сплав на байдарках похож на полет.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be \"4\"').to.eql(4);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"На воде\"').to.eql('На воде');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
													"    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\"').to.eql('Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.');\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-07-31 15:00:00\"').to.eql('2024-07-31 15:00:00');\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.id  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('id');\r",
													"    pm.expect(jsonData.initiator.id, '\"initiator.id\" must be \"1\"').to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Test initiator.name  field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('initiator');\r",
													"    pm.expect(jsonData.initiator).to.have.property('name');\r",
													"    pm.expect(jsonData.initiator.name, '\"initiator.name\" must be \"Иван Петров\"').to.eql('Иван Петров');\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"55.754166\"').to.eql(55.754166);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lon\" must be \"37.62\"').to.eql(37.62);\r",
													"});\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"true\"').to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"10\"').to.eql(10);\r",
													"});\r",
													"\r",
													"pm.test(\"Test requestModeration field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('requestModeration');\r",
													"    pm.expect(jsonData.requestModeration, '\"requestModeration\" must be \"false\"').to.eql(false);\r",
													"});\r",
													"\r",
													"pm.test(\"Test state field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('state');\r",
													"    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');\r",
													"});\r",
													"\r",
													"pm.test(\"Test title field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('title');\r",
													"    pm.expect(jsonData.title, '\"title\" must be \"Сплав на байдарках\"').to.eql('Сплав на байдарках');\r",
													"});\r",
													"\r",
													"pm.test(\"Test views field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('views');\r",
													"    pm.expect(jsonData.views, '\"views\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/1",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch status for event 2",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/2",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch status for event 3",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch status for event 5",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/5",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch status for event 6",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/6",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"6"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch status for event 5 twice",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/5",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only Annotation Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'annotation' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('annotation');\r",
													"    pm.expect(jsonData.annotation, '\"annotation\" must be \"Послушайте музыку с друзьями в тёплый вечер на берегу залива\"').to.eql('Послушайте музыку с друзьями в тёплый вечер на берегу залива');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"annotation\": \"Послушайте музыку с друзьями в тёплый вечер на берегу залива\"\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only Category Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.id' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('id');\r",
													"    pm.expect(jsonData.category.id, '\"id\" must be \"2\"').to.eql(2);\r",
													"});\r",
													"\r",
													"pm.test(\"Test event 'category.name' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('category');\r",
													"    pm.expect(jsonData.category).to.have.property('name');\r",
													"    pm.expect(jsonData.category.name, '\"name\" must be \"Кухня\"').to.eql('Кухня');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"category\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only Description Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test event 'description' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('description');\r",
													"    pm.expect(jsonData.description, '\"description\" must be \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.\"').to.eql('Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Test views field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('views');\r",
													"    pm.expect(jsonData.views, '\"views\" must be \"0\"').to.eql(0);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"description\": \"Музыканты выступят прямо на песчаном пляже, там же будут расставлены скамейки для слушаталей. Для детей отдельныое пространство.\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only EventDate Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test event 'eventDate' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('eventDate');\r",
													"    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2024-06-27 22:35:00\"').to.eql('2024-06-27 22:35:00');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"eventDate\": \"2024-06-27 22:35:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only Location Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test location.lat field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lat');\r",
													"    pm.expect(jsonData.location.lat, '\"location.lat\" must be \"59.9576\"').to.eql(59.9576);\r",
													"});\r",
													"\r",
													"pm.test(\"Test location.lon field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('location');\r",
													"    pm.expect(jsonData.location).to.have.property('lon');\r",
													"    pm.expect(jsonData.location.lon, '\"location.lat\" must be \"30.3033\"').to.eql(30.3033);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"location\": {\r\n    \"lat\": 59.9576,\r\n    \"lon\": 30.3033\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only Paid Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test paid field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('paid');\r",
													"    pm.expect(jsonData.paid, '\"paid\" must be \"true\"').to.eql(true);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"paid\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only participantLimit Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test participantLimit field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('participantLimit');\r",
													"    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be \"3\"').to.eql(3);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"participantLimit\": 3\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only requestModeration Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test requestModeration field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('requestModeration');\r",
													"    pm.expect(jsonData.requestModeration, '\"requestModeration\" must be \"false\"').to.eql(false);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"requestModeration\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch event_3 - OK - Only title Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test title field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('title');\r",
													"    pm.expect(jsonData.title, '\"title\" must be \"Музыка любви под шум волн в заливе\"').to.eql('Музыка любви под шум волн в заливе');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"Музыка любви под шум волн в заливе\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/admin/events/3",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"events",
												"3"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Request.Private",
					"item": [
						{
							"name": "Add",
							"item": [
								{
									"name": "New Request_1 from user 2 to event 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Has user update response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/2/requests/?eventId=6",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"requests",
												""
											],
											"query": [
												{
													"key": "eventId",
													"value": "6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request_2 from user 6 to event 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/6/requests?eventId=1",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"6",
												"requests"
											],
											"query": [
												{
													"key": "eventId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request_3 from user 1 to event 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Has user update response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/1/requests/?eventId=6",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"requests",
												""
											],
											"query": [
												{
													"key": "eventId",
													"value": "6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request_4 from user 1 to event 5",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/1/requests/?eventId=5",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"requests",
												""
											],
											"query": [
												{
													"key": "eventId",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request_5 from user 4 to event 1",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/4/requests/?eventId=1",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"4",
												"requests",
												""
											],
											"query": [
												{
													"key": "eventId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Repeat Request_5 from user 4 to event 1",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/4/requests/?eventId=1",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"4",
												"requests",
												""
											],
											"query": [
												{
													"key": "eventId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request_6 from user 4 to event 2",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/4/requests/?eventId=2",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"4",
												"requests",
												""
											],
											"query": [
												{
													"key": "eventId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request_7 from user 7 to event 2",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/7/requests/?eventId=2",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"7",
												"requests",
												""
											],
											"query": [
												{
													"key": "eventId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request_8 from user 8 to event 2",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/8/requests/?eventId=2",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"8",
												"requests",
												""
											],
											"query": [
												{
													"key": "eventId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request_9 from user 9 to event 2",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/9/requests/?eventId=2",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"9",
												"requests",
												""
											],
											"query": [
												{
													"key": "eventId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New Request_10 from user 10 to event 2",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/10/requests/?eventId=2",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"10",
												"requests",
												""
											],
											"query": [
												{
													"key": "eventId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List",
							"item": [
								{
									"name": "Get requests from user 2 to events created by other users",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/2/requests",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"2",
												"requests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get requests from user 4 to events created by other users",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/4/requests",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"4",
												"requests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get requests from user 6 to events created by other users",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/6/requests",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"6",
												"requests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get requests from user wrong id 66 to events created by other users",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/66/requests",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"66",
												"requests"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Reject",
							"item": [
								{
									"name": "Cancel request from user 1 to event 5",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/1/requests/5/cancel",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"requests",
												"5",
												"cancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel request from user 1 to event 5 twice",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/1/requests/5/cancel",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"requests",
												"5",
												"cancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel request from user 1 to event 4 - request not exist",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/1/requests/4/cancel",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"requests",
												"4",
												"cancel"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get request list from event owner",
							"item": [
								{
									"name": "Get Requests from user 1 to event 1",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/1/events/1/requests",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"events",
												"1",
												"requests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Requests from user 1 to event 3 - not owner",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/1/events/3/requests",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"events",
												"3",
												"requests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Requests from user 1 to event 2",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/1/events/2/requests",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"events",
												"2",
												"requests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Requests from user 6 to event 6",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/users/6/events/6/requests",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"6",
												"events",
												"6",
												"requests"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Change Request status",
							"item": [
								{
									"name": "Confirm requests from user 1 to event 1",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"requestIds\": [\r\n    2,\r\n    5\r\n  ],\r\n  \"status\": \"CONFIRMED\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/users/1/events/1/requests",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"users",
												"1",
												"events",
												"1",
												"requests"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Compilation",
					"item": [
						{
							"name": "Admin",
							"item": [
								{
									"name": "Create",
									"item": [
										{
											"name": "Add compilation_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"events\": [\r\n    8,\r\n    9,\r\n    10\r\n  ],\r\n  \"pinned\": false,\r\n  \"title\": \"Шоу на природе\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"events\": [\r\n    1,\r\n    2\r\n  ],\r\n  \"pinned\": false,\r\n  \"title\": \"Приключения на воде\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation_3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"events\": [\r\n    3,\r\n    4\r\n  ],\r\n  \"pinned\": false,\r\n  \"title\": \"Невероятные концерты\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation_4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 409\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"events\": [\r\n    3,\r\n    4\r\n  ],\r\n  \"pinned\": false,\r\n  \"title\": \"Невероятные концерты\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation without pinned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"events\": [\r\n    5,\r\n    6\r\n  ],\r\n  \"title\": \"Проверенные места\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation without title wrong",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"events\": [\r\n    3,\r\n    4\r\n  ],\r\n  \"pinned\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation empty title wrong",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"events\": [\r\n    3,\r\n    4\r\n  ],\r\n  \"pinned\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation_5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"pinned\": false,\r\n  \"title\": \"Весёлые старты\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation_6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 or 201\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"pinned\": false,\r\n  \"title\": \"Кухня с шефом\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation_7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 or 201\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"pinned\": false,\r\n  \"title\": \"Кухня с шефом в лучшем ресторане\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation_8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 or 201\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"pinned\": true,\r\n  \"title\": \"Весёлая семья\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation_9",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"pinned\": true,\r\n  \"title\": \"Марафон\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation_10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"pinned\": true,\r\n  \"title\": \"Экскурсии в парках\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation_11",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"pinned\": true,\r\n  \"title\": \"Экскурсии в парках и садах\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add compilation_12",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"pinned\": true,\r\n  \"title\": \"Домашний зоопарк\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete",
									"item": [
										{
											"name": "Delete compilation_3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations/3",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations",
														"3"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete wrong compilation_22 ",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations/22",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations",
														"22"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Patch",
									"item": [
										{
											"name": "Patch compilation_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"events\": [\r\n    0\r\n  ],\r\n  \"pinned\": true,\r\n  \"title\": \"Отпадные приключения на воде\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations/4",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations",
														"4"
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch compilation_22 wrong id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"events\": [\r\n    0\r\n  ],\r\n  \"pinned\": true,\r\n  \"title\": \"Отпадные приключения на воде\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations/22",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations",
														"22"
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch compilation only Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"12345678901234567890123456789012345678901234567890\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations/4",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations",
														"4"
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch compilation only pinned",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"pm.test(\"Has event create response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"pinned\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "localhost:8080/admin/compilations/4",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"compilations",
														"4"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Public",
							"item": [
								{
									"name": "Get all",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/compilations?pinned=false&from=1&size=5",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"compilations"
											],
											"query": [
												{
													"key": "pinned",
													"value": "false"
												},
												{
													"key": "from",
													"value": "1"
												},
												{
													"key": "size",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all pined",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/compilations?pinned=true&from=2&size=2",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"compilations"
											],
											"query": [
												{
													"key": "pinned",
													"value": "true"
												},
												{
													"key": "from",
													"value": "2"
												},
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get comp_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/compilations/1",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"compilations",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get comp_111 wrong id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"pm.test(\"Has event create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/compilations/111",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"compilations",
												"111"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Events.Public",
					"item": [
						{
							"name": "Get list_1 with text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/events/?text=вод",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										""
									],
									"query": [
										{
											"key": "text",
											"value": "вод"
										},
										{
											"key": "categories",
											"value": "2",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "3",
											"disabled": true
										},
										{
											"key": "paid",
											"value": "false",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "2024-01-10 14:30:00",
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": "2024-10-10 14:30:00",
											"disabled": true
										},
										{
											"key": "onlyAvailable",
											"value": null,
											"disabled": true
										},
										{
											"key": "sort",
											"value": "EVENT_DATE",
											"disabled": true
										},
										{
											"key": "from",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "5",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list_2 with categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/events/?categories=2&categories=4",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										""
									],
									"query": [
										{
											"key": "text",
											"value": "вод",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "2"
										},
										{
											"key": "categories",
											"value": "4"
										},
										{
											"key": "paid",
											"value": "false",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "2024-01-10 14:30:00",
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": "2024-10-10 14:30:00",
											"disabled": true
										},
										{
											"key": "onlyAvailable",
											"value": "",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "EVENT_DATE",
											"disabled": true
										},
										{
											"key": "from",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "5",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list_3 with paid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/events/?paid=false",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										""
									],
									"query": [
										{
											"key": "text",
											"value": "вод",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "2",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "3",
											"disabled": true
										},
										{
											"key": "paid",
											"value": "false"
										},
										{
											"key": "rangeStart",
											"value": "2024-01-10 14:30:00",
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": "2024-10-10 14:30:00",
											"disabled": true
										},
										{
											"key": "onlyAvailable",
											"value": "",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "EVENT_DATE",
											"disabled": true
										},
										{
											"key": "from",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "5",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list_4 with startTime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/events/?rangeStart=2024-01-10 14:30:00",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										""
									],
									"query": [
										{
											"key": "text",
											"value": "вод",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "2",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "3",
											"disabled": true
										},
										{
											"key": "paid",
											"value": "false",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "2024-01-10 14:30:00"
										},
										{
											"key": "rangeEnd",
											"value": "2024-10-10 14:30:00",
											"disabled": true
										},
										{
											"key": "onlyAvailable",
											"value": "",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "EVENT_DATE",
											"disabled": true
										},
										{
											"key": "from",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "5",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list_5 with startTime and endTime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/events/?rangeStart=2024-01-10 14:30:00&rangeEnd=2024-10-10 14:30:00",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										""
									],
									"query": [
										{
											"key": "text",
											"value": "вод",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "2",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "3",
											"disabled": true
										},
										{
											"key": "paid",
											"value": "false",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "2024-01-10 14:30:00"
										},
										{
											"key": "rangeEnd",
											"value": "2024-10-10 14:30:00"
										},
										{
											"key": "onlyAvailable",
											"value": "true",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "EVENT_DATE",
											"disabled": true
										},
										{
											"key": "from",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "5",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list_6 with available",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/events/?onlyAvailable=true",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										""
									],
									"query": [
										{
											"key": "text",
											"value": "вод",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "2",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "3",
											"disabled": true
										},
										{
											"key": "paid",
											"value": "false",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "2024-01-10 14:30:00",
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": "2024-10-10 14:30:00",
											"disabled": true
										},
										{
											"key": "onlyAvailable",
											"value": "true"
										},
										{
											"key": "sort",
											"value": "EVENT_DATE",
											"disabled": true
										},
										{
											"key": "from",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "5",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list_7 with sort EVENT_DATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/events/?sort=EVENT_DATE",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										""
									],
									"query": [
										{
											"key": "text",
											"value": "вод",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "2",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "3",
											"disabled": true
										},
										{
											"key": "paid",
											"value": "false",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "2024-01-10 14:30:00",
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": "2024-10-10 14:30:00",
											"disabled": true
										},
										{
											"key": "onlyAvailable",
											"value": "true",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "EVENT_DATE"
										},
										{
											"key": "from",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "5",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list_8 with sort VIEWS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/events/?sort=VIEWS",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										""
									],
									"query": [
										{
											"key": "text",
											"value": "вод",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "2",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "3",
											"disabled": true
										},
										{
											"key": "paid",
											"value": "false",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "2024-01-10 14:30:00",
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": "2024-10-10 14:30:00",
											"disabled": true
										},
										{
											"key": "onlyAvailable",
											"value": "true",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "VIEWS"
										},
										{
											"key": "from",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "5",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list_9 with from",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/events/?from=0&size=5",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										""
									],
									"query": [
										{
											"key": "text",
											"value": "вод",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "2",
											"disabled": true
										},
										{
											"key": "categories",
											"value": "3",
											"disabled": true
										},
										{
											"key": "paid",
											"value": "false",
											"disabled": true
										},
										{
											"key": "rangeStart",
											"value": "2024-01-10 14:30:00",
											"disabled": true
										},
										{
											"key": "rangeEnd",
											"value": "2024-10-10 14:30:00",
											"disabled": true
										},
										{
											"key": "onlyAvailable",
											"value": "true",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "EVENT_DATE",
											"disabled": true
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list_10 with ALL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/events/?text=вод&categories=2&categories=4&paid=false&rangeStart=2024-01-10 14:30:00&rangeEnd=2024-10-10 14:30:00&onlyAvailable=true&sort=EVENT_DATE&from=0&size=5",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										""
									],
									"query": [
										{
											"key": "text",
											"value": "вод"
										},
										{
											"key": "categories",
											"value": "2"
										},
										{
											"key": "categories",
											"value": "4"
										},
										{
											"key": "paid",
											"value": "false"
										},
										{
											"key": "rangeStart",
											"value": "2024-01-10 14:30:00"
										},
										{
											"key": "rangeEnd",
											"value": "2024-10-10 14:30:00"
										},
										{
											"key": "onlyAvailable",
											"value": "true"
										},
										{
											"key": "sort",
											"value": "EVENT_DATE"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  with id=6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/events/6",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										"6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  with wrong id=33",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/events/33",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"events",
										"33"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Categories.Public",
					"item": [
						{
							"name": "List all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/categories?from=0&size=5",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List id=6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/categories/6",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"categories",
										"6"
									]
								}
							},
							"response": []
						},
						{
							"name": "List id=66 wrong id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"pm.test(\"Has event create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/categories/66",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"categories",
										"66"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Admin-Correction",
			"item": [
				{
					"name": "1. List event_8 ________________________________________<Check, if event in Pending Status>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test event 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 8').to.eql(8);\r",
									"});\r",
									"\r",
									"pm.test(\"Test event 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');\r",
									"    pm.expect(jsonData.state, '\"state\" must be \"PENDING\"').to.eql('PENDING');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/events/8",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Patch status for event 8___________________________ <Change status to Noted>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test event 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 8').to.eql(8);\r",
									"});\r",
									"\r",
									"pm.test(\"Test event 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');\r",
									"    pm.expect(jsonData.state, '\"state\" must be \"NOTED\"').to.eql('NOTED');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stateAction\": \"GET_NOTED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/events/8",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Add notes to Event_8______________________________<Add initial notes>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function()\r",
									"{\r",
									"pm.response.to.have.status(201);\r",
									"pm.response.to.be.withBody;\r",
									"pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Check list length\", function(){\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData.length, 'List length must be 3').to.eql(3);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/8?ANNOTATION=not interesting&DESCRIPTION=too short&CATEGORY=wrong",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "ANNOTATION",
									"value": "not interesting"
								},
								{
									"key": "DESCRIPTION",
									"value": "too short"
								},
								{
									"key": "CATEGORY",
									"value": "wrong"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. List event_10 ________________________________________<Check, if event in Pending Status> Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test event 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 10').to.eql(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Test event 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');\r",
									"    pm.expect(jsonData.state, '\"state\" must be \"PENDING\"').to.eql('PENDING');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/events/10",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Patch status for event 10___________________________ <Change status to Noted>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test event 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 10').to.eql(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Test event 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');\r",
									"    pm.expect(jsonData.state, '\"state\" must be \"NOTED\"').to.eql('NOTED');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stateAction\": \"GET_NOTED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/events/10",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Add notes to Event_10______________________________<Add initial notes>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function()\r",
									"{\r",
									"pm.response.to.have.status(201);\r",
									"pm.response.to.be.withBody;\r",
									"pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Check list length\", function(){\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/10?LOCATION=check it&TITLE=change it",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"10"
							],
							"query": [
								{
									"key": "LOCATION",
									"value": "check it"
								},
								{
									"key": "TITLE",
									"value": "change it"
								},
								{
									"key": "CATEGORY",
									"value": "wrong",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "7. Get all Events with state=Noted ____________________<Check 8 & 10 in list>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Test list user response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test user[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 8').to.eql(8);\r",
									"});\r",
									"\r",
									"pm.test(\"Test user[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 10').to.eql(10);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/events?states=NOTED",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "states",
									"value": "NOTED"
								},
								{
									"key": "ids",
									"value": "2",
									"disabled": true
								},
								{
									"key": "ids",
									"value": "4",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Find corrections for event 8 BY ADMIN all _________<Check Initial notes added>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"   pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test list corrections size response (5)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Test corrections[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test corrections[0] 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].state, '\"state\" must be \"INITIAL\"').to.eql('INITIAL');\r",
									"});\r",
									"\r",
									"pm.test(\"Test corrections[1] 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].state, '\"state\" must be \"INITIAL\"').to.eql('INITIAL');\r",
									"});\r",
									"\r",
									"pm.test(\"Test corrections[2] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('id');\r",
									"    pm.expect(jsonData[2].state, '\"state\" must be \"INITIAL\"').to.eql('INITIAL');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test corrections[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test corrections[2] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('id');\r",
									"    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/8",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "eventFields",
									"value": "DESCRIPTION",
									"disabled": true
								},
								{
									"key": "revisionStates",
									"value": "EDITED",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "9. *Error* Find corrections for event 8 BY ADMIN wrong field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/8?eventFields=PAID&eventFields=TITLE",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "eventFields",
									"value": "PAID"
								},
								{
									"key": "eventFields",
									"value": "TITLE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "10. *Error* Add notes to Event_9 ______________________<Event not in status=Noted>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/9?ANNOTATION=not interesting&DESCRIPTION=too short&CATEGORY=wrong",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"9"
							],
							"query": [
								{
									"key": "ANNOTATION",
									"value": "not interesting"
								},
								{
									"key": "DESCRIPTION",
									"value": "too short"
								},
								{
									"key": "CATEGORY",
									"value": "wrong"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "11. *Error* Add notes to Event_8______________________<Key unexistable>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/8?ANNOT=not interesting&DESCRIPTION=too short&CATEGORY=wrong",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "ANNOT",
									"value": "not interesting"
								},
								{
									"key": "DESCRIPTION",
									"value": "too short"
								},
								{
									"key": "CATEGORY",
									"value": "wrong"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "12. Patch event_8 - description - by User _____________<Corrections has to be saved>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Has event create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"Приглашённый диджей Хубу-буба не даст вам скучать целый вечер! Берегите каблуки!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/9/events/8",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"9",
								"events",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "13. Get corrections by user 8 to event 8 edited _______<Check correction saved>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check list length\", function(){\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/8/corrections/8?revisionStates=EDITED&eventFields=DESCRIPTION",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"8",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "revisionStates",
									"value": "EDITED"
								},
								{
									"key": "eventFields",
									"value": "DESCRIPTION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "14. *Error* Get corrections by user 7 - wrong to event 8 edited",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/7/corrections/8?revisionStates=EDITED&eventFields=DESCRIPTION",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"7",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "revisionStates",
									"value": "EDITED"
								},
								{
									"key": "eventFields",
									"value": "DESCRIPTION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "15. Approve edited field for event 8 - DESCRIPTION__<Status has to be changed>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function()\r",
									"{\r",
									"pm.response.to.have.status(201);\r",
									"pm.response.to.be.withBody;\r",
									"pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test list corrections size response (1)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test corrections[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test corrections[0] 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].state, '\"state\" must be \"RESOLVED\"').to.eql('RESOLVED');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/8/approve?eventFields=DESCRIPTION",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"8",
								"approve"
							],
							"query": [
								{
									"key": "eventFields",
									"value": "ANNOTATION",
									"disabled": true
								},
								{
									"key": "eventFields",
									"value": "DESCRIPTION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "16. Get corrections by user 8 to event 8 resolved _____<DESCRIPTION has to be resolved>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Test list correctiom response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Test correctiom[0] 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].state, '\"id\" must be \"RESOLVED\"').to.eql('RESOLVED');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/8/corrections/8?revisionStates=RESOLVED&eventFields=DESCRIPTION",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"8",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "revisionStates",
									"value": "RESOLVED"
								},
								{
									"key": "eventFields",
									"value": "DESCRIPTION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "17. Patch event_8 - OK - Only Annotation Admin _____<Edit field by Admin>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has event create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"Нет большего наслаждения, чем послушать музыку с друзьями в тёплый вечер на берегу залива\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/events/8",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "18. Check corrections saved for event 8 BY ADMIN with eventFields and revisionStates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test list correctiom response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Test correctiom[0] 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].state, '\"id\" must be \"EDITED\"').to.eql('EDITED');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/8?eventFields=ANNOTATION&revisionStates=EDITED",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "eventFields",
									"value": "ANNOTATION"
								},
								{
									"key": "revisionStates",
									"value": "EDITED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "19. *Empty list* Find corrections for event 9 <Not Noted> BY ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/9",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"9"
							],
							"query": [
								{
									"key": "eventFields",
									"value": "DESCRIPTION",
									"disabled": true
								},
								{
									"key": "revisionStates",
									"value": "EDITED",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "20. Patch event_8 - catrgory - by User ________________<Correction has to be changed>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Has event create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/9/events/8",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"9",
								"events",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "21. Find corrections for event 8 BY ADMIN all ________ <Check category editing>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Test list correctiom response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Test correctiom[0] 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].state, '\"id\" must be \"EDITED\"').to.eql('EDITED');\r",
									"});\r",
									"\r",
									"pm.test(\"Test correctiom[1] 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].state, '\"id\" must be \"EDITED\"').to.eql('EDITED');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/8?revisionStates=EDITED",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "eventFields",
									"value": "DESCRIPTION",
									"disabled": true
								},
								{
									"key": "revisionStates",
									"value": "EDITED"
								},
								{
									"key": "revisionStates",
									"value": "REPEATED",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "22. Add note to Event_8 REPEATED ABOUT CATEGORY __<Admin don't satisfied>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"ppm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function()\r",
									"{\r",
									"pm.response.to.have.status(201);\r",
									"pm.response.to.be.withBody;\r",
									"pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Test correction 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');\r",
									"    pm.expect(jsonData.state, '\"state\" must be \"REPEATED\"').to.eql('REPEATED');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/8?CATEGORY=wrong AGAIN - on the water",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "ANNOTATION",
									"value": "not interesting",
									"disabled": true
								},
								{
									"key": "DESCRIPTION",
									"value": "too short",
									"disabled": true
								},
								{
									"key": "CATEGORY",
									"value": "wrong AGAIN - on the water"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "23. Get corrections by user 8 to event 8 edited _______<Check Category correction status>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/8/corrections/8?eventFields=CATEGORY",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"8",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "revisionStates",
									"value": "EDITED",
									"disabled": true
								},
								{
									"key": "eventFields",
									"value": "CATEGORY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "24. Patch event_8 - catrgory - by User repeated______<Changing again>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
									"});\r",
									"pm.test(\"Has event create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/9/events/8",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"9",
								"events",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "25. Find corrections for event 8 BY ADMIN CATEGORY __<Check repeated changing>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test correctiom[0] 'state' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].state, '\"id\" must be \"EDITED\"').to.eql('EDITED');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/8?eventFields=CATEGORY",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "revisionStates",
									"value": "EDITED",
									"disabled": true
								},
								{
									"key": "eventFields",
									"value": "CATEGORY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "26. Approve edited fields for event 8 - ANNOTATION & CATEGORY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/8/approve?eventFields=ANNOTATION&eventFields=CATEGORY",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"8",
								"approve"
							],
							"query": [
								{
									"key": "eventFields",
									"value": "ANNOTATION"
								},
								{
									"key": "eventFields",
									"value": "CATEGORY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "27. List event_8 ______________________________________<Event has to BE PUBLISHED>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/events/8",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "28. Find corrections for event 8 BY ADMIN all _______< LIST has to BE EMPTY>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/admin/corrections/8",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"corrections",
								"8"
							],
							"query": [
								{
									"key": "eventFields",
									"value": "CATEGORY",
									"disabled": true
								},
								{
									"key": "revisionStates",
									"value": "EDITED",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}